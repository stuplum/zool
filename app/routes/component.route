'use strict';

const glob = require('glob');
const resolve = require('path').resolve;

const ZoolSass = require('zool-sass');
const highlight = require('highlight.js').highlight;
const MarkdownParser = require('../lib/markdown-parser');

const EXAMPLE_GLOB = 'example*.md';
const EXAMPLE_REGEX = 'example.([a-z_-]+).md';

module.exports = function (config) {

    const componentsDir = resolve(process.cwd(), config.componentsDir);

    function replyWithUsage(request, cb) {

        const fileName = 'README.md';
        const componentName = request.params.location;
        const componentPath = `${componentsDir}/${componentName}`;

        const markdownParser = new MarkdownParser(config.APP_NAME, fileName);
        markdownParser.parse(componentName, componentPath, cb);

    }

    function extractExampleId(example) {

        const re = new RegExp(EXAMPLE_REGEX, 'gi');
        const res = re.exec(example);

        return res ? res[1] : undefined;
    }

    return {

        method: 'GET', path: '/{location*}',
        handler: (request, reply) => {
            replyWithUsage(request, (usage, componentName, location) => {

                glob(EXAMPLE_GLOB, {cwd: location}, (err, examples) => {

                    const hasExample = examples.length === 1;
                    const hasExamples = examples.length > 1;

                    examples = examples.map(extractExampleId);

                    const initialData = JSON.stringify({
                        example: {
                            componentName,
                            examples
                        }
                    });

                    const opts = {
                        force: true,
                        entryPoint: config.plugins.sass.entryPoint,
                        extension: config.plugins.sass.extension,
                        src: config.componentsDir,
                        dest: './_compiled/css',
                        includePaths: [config.componentsDir],
                        outputStyle: 'expanded'
                    };

                    ZoolSass.compile(componentName, opts)

                        .then(css => {
                            return `<pre class="hljs"><code class="css">${highlight('css', css).value}</code></pre>`;
                        })

                        .then(highlightedCss => {
                            reply.view('view/component', {
                                usage,
                                componentName,
                                location,
                                hasExample,
                                hasExamples,
                                examples,
                                initialData,
                                highlightedCss
                            });
                        })

                        .catch(() => {
                            reply.view('view/component', {
                                usage,
                                componentName,
                                location,
                                hasExample,
                                hasExamples,
                                examples,
                                initialData
                            });
                        });

                });
            });
        }
    };
};
